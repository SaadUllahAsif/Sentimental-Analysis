# Finding redundancy
redundant <- is.redundant(rules, measure="confidence")
which(redundant)
rules.pruned <- rules[!redundant]
rules.pruned <- sort(rules.pruned, by="lift")
inspect(rules.pruned)
dataInput <- read.csv("Amazon.csv")
setwd("C:/Users/Saad Ullah/Desktop/ASDM/Clustering")
dataInput <- read.csv("Amazon.csv")
library("cluster")
library("factoextra")
# Removing the date column
dataInput.labels =dataInput$Date
table(dataInput.labels)
kmData <- dataInput[2:7]
# Scaling data
kmData_scale <- scale(kmData)
# Distance
kmData_distance <- dist(kmData_scale)
# calculating how many clusters needed using within sum square (WSS)
fviz_nbclust(kmData_scale, kmeans, method = "wss") + labs(subtitle = "Elbow method")
#k-mean
kmoutput <- kmeans(kmData_scale, centers = 2, nstart = 100)
print(kmoutput)
# visualization and clustering results
kmdataCluster <- kmoutput$cluster
rownames(kmData_scale) <- paste(dataInput$Date, 1:dim(dataInput)[1], sep = "-")
fviz_cluster(list(data=kmData_scale, cluster = kmdataCluster))
?clusters
?cluster
?cluster package
dataInput <- read.csv("Amazon.csv")
library("factoextra")
# Removing the date column
dataInput.labels =dataInput$Date
table(dataInput.labels)
kmData <- dataInput[2:7]
# Scaling data
kmData_scale <- scale(kmData)
# Distance
kmData_distance <- dist(kmData_scale)
# calculating how many clusters needed using within sum square (WSS)
fviz_nbclust(kmData_scale, kmeans, method = "wss") + labs(subtitle = "Elbow method")
#k-mean
kmoutput <- kmeans(kmData_scale, centers = 2, nstart = 100)
print(kmoutput)
# visualization and clustering results
kmdataCluster <- kmoutput$cluster
rownames(kmData_scale) <- paste(dataInput$Date, 1:dim(dataInput)[1], sep = "-")
fviz_cluster(list(data=kmData_scale, cluster = kmdataCluster))
View(dataInput)
View(dataInput)
kmData
# Removing the date column
dataInput.labels =dataInput$Date
table(dataInput.labels)
kmData <- dataInput[2:7]
kmData
# Scaling data
kmData_scale <- scale(kmData)
# Distance
kmData_distance <- dist(kmData_scale)
# calculating how many clusters needed using within sum square (WSS)
fviz_nbclust(kmData_scale, kmeans, method = "wss") + labs(subtitle = "Elbow method")
# visualization and clustering results
kmdataCluster <- kmoutput$cluster
rownames(kmData_scale) <- paste(dataInput$Date, 1:dim(dataInput)[1], sep = "-")
fviz_cluster(list(data=kmData_scale, cluster = kmdataCluster))
# calculating how many clusters needed using within sum square (WSS)
fviz_nbclust(kmData_scale, kmeans, method = "wss") + labs(subtitle = "Elbow method")
# visualization and clustering results
kmdataCluster <- kmoutput$cluster
rownames(kmData_scale) <- paste(dataInput$Date, 1:dim(dataInput)[1], sep = "-")
fviz_cluster(list(data=kmData_scale, cluster = kmdataCluster))
#k-mean
kmoutput <- kmeans(kmData_scale, centers = 3, nstart = 100)
print(kmoutput)
# visualization and clustering results
kmdataCluster <- kmoutput$cluster
rownames(kmData_scale) <- paste(dataInput$Date, 1:dim(dataInput)[1], sep = "-")
fviz_cluster(list(data=kmData_scale, cluster = kmdataCluster))
#k-mean
kmoutput <- kmeans(kmData_scale, centers = 2, nstart = 100)
print(kmoutput)
# visualization and clustering results
kmdataCluster <- kmoutput$cluster
rownames(kmData_scale) <- paste(dataInput$Date, 1:dim(dataInput)[1], sep = "-")
fviz_cluster(list(data=kmData_scale, cluster = kmdataCluster))
table(kmdataCluster, dataInput$date)
table(kmdataCluster, dataInput$Date)
data <- read.csv("tourist_accommodation_reviews.csv", header= TRUE)
library("dplyr")
hotels <- data[(data$Hotel.Restaurant.name == "Thong Dee The Kathu Brasserie" |
data$Hotel.Restaurant.name == "Odysseus Greek Organic Restaurant"|
data$Hotel.Restaurant.name == "Green Tamarind Kitchen" |
data$Hotel.Restaurant.name == "Dee Plee - Anantara Layan Phuket Resort" |
data$Hotel.Restaurant.name == "The Tavern" |
data$Hotel.Restaurant.name == "EAT. bar & grill" |
data$Hotel.Restaurant.name == "Surf and Turf by Soul Kitchen" |
data$Hotel.Restaurant.name == "Siam Supper Club" |
data$Hotel.Restaurant.name == "Sam's Steaks and Grill" |
data$Hotel.Restaurant.name == "Istanbul Turkish Restaurant" |
data$Hotel.Restaurant.name == "The Corner Restaurant" |
data$Hotel.Restaurant.name == "Kataturk Turkish Restaurant" |
data$Hotel.Restaurant.name == "Sala Sawasdee Lobby Bar" |
data$Hotel.Restaurant.name == "The Palm Cuisine" |
data$Hotel.Restaurant.name == "Highway Curry Indian & Thai Cuisine" |
data$Hotel.Restaurant.name == "Tandoori Flames" |
data$Hotel.Restaurant.name == "Pad Thai Shop" |
data$Hotel.Restaurant.name == "Golden Paradise Restaurant" |
data$Hotel.Restaurant.name == "Mr.Coffee" |
data$Hotel.Restaurant.name == "Flavor Phuket" |
data$Hotel.Restaurant.name == "Baan Noy Restaurant" |
data$Hotel.Restaurant.name == "Ao Chalong Yacht Club Restaurant" |
data$Hotel.Restaurant.name == "Naughty Nuri's Phuket" |
data$Hotel.Restaurant.name == "Surin Chill House" |
data$Hotel.Restaurant.name == "Natural Efe Macrobiotic World" |
data$Hotel.Restaurant.name == "Honeymoon Thai Restaurant by Kenya" |
data$Hotel.Restaurant.name == "O-OH Farm Ta-Eiad" |
data$Hotel.Restaurant.name == "Da Puccio Restaurant" |
data$Hotel.Restaurant.name == "Sizzle Rooftop Restaurant" |
data$Hotel.Restaurant.name == "Benny's American Bar & Grill"
) ,]
hotel1 <- hotels[(hotels$Hotel.Restaurant.name == "Thong Dee The Kathu Brasserie"),]
hotel2 <- hotels[(hotels$Hotel.Restaurant.name == "Odysseus Greek Organic Restaurant"),]
hotel3 <- hotels[(hotels$Hotel.Restaurant.name == "Green Tamarind Kitchen"),]
hotel4 <- hotels[(hotels$Hotel.Restaurant.name == "Dee Plee - Anantara Layan Phuket Resort"),]
hotel5 <- hotels[(hotels$Hotel.Restaurant.name == "The Tavern"),]
hotel6 <- hotels[(hotels$Hotel.Restaurant.name == "EAT. bar & grill"),]
setwd("C:/Users/Saad Ullah/Desktop/ASDM/task 4")
data <- read.csv("tourist_accommodation_reviews.csv", header= TRUE)
library("dplyr")
hotels <- data[(data$Hotel.Restaurant.name == "Thong Dee The Kathu Brasserie" |
data$Hotel.Restaurant.name == "Odysseus Greek Organic Restaurant"|
data$Hotel.Restaurant.name == "Green Tamarind Kitchen" |
data$Hotel.Restaurant.name == "Dee Plee - Anantara Layan Phuket Resort" |
data$Hotel.Restaurant.name == "The Tavern" |
data$Hotel.Restaurant.name == "EAT. bar & grill" |
data$Hotel.Restaurant.name == "Surf and Turf by Soul Kitchen" |
data$Hotel.Restaurant.name == "Siam Supper Club" |
data$Hotel.Restaurant.name == "Sam's Steaks and Grill" |
data$Hotel.Restaurant.name == "Istanbul Turkish Restaurant" |
data$Hotel.Restaurant.name == "The Corner Restaurant" |
data$Hotel.Restaurant.name == "Kataturk Turkish Restaurant" |
data$Hotel.Restaurant.name == "Sala Sawasdee Lobby Bar" |
data$Hotel.Restaurant.name == "The Palm Cuisine" |
data$Hotel.Restaurant.name == "Highway Curry Indian & Thai Cuisine" |
data$Hotel.Restaurant.name == "Tandoori Flames" |
data$Hotel.Restaurant.name == "Pad Thai Shop" |
data$Hotel.Restaurant.name == "Golden Paradise Restaurant" |
data$Hotel.Restaurant.name == "Mr.Coffee" |
data$Hotel.Restaurant.name == "Flavor Phuket" |
data$Hotel.Restaurant.name == "Baan Noy Restaurant" |
data$Hotel.Restaurant.name == "Ao Chalong Yacht Club Restaurant" |
data$Hotel.Restaurant.name == "Naughty Nuri's Phuket" |
data$Hotel.Restaurant.name == "Surin Chill House" |
data$Hotel.Restaurant.name == "Natural Efe Macrobiotic World" |
data$Hotel.Restaurant.name == "Honeymoon Thai Restaurant by Kenya" |
data$Hotel.Restaurant.name == "O-OH Farm Ta-Eiad" |
data$Hotel.Restaurant.name == "Da Puccio Restaurant" |
data$Hotel.Restaurant.name == "Sizzle Rooftop Restaurant" |
data$Hotel.Restaurant.name == "Benny's American Bar & Grill"
) ,]
hotel1 <- hotels[(hotels$Hotel.Restaurant.name == "Thong Dee The Kathu Brasserie"),]
hotel2 <- hotels[(hotels$Hotel.Restaurant.name == "Odysseus Greek Organic Restaurant"),]
hotel3 <- hotels[(hotels$Hotel.Restaurant.name == "Green Tamarind Kitchen"),]
hotel4 <- hotels[(hotels$Hotel.Restaurant.name == "Dee Plee - Anantara Layan Phuket Resort"),]
hotel5 <- hotels[(hotels$Hotel.Restaurant.name == "The Tavern"),]
hotel6 <- hotels[(hotels$Hotel.Restaurant.name == "EAT. bar & grill"),]
hotel7 <- hotels[(hotels$Hotel.Restaurant.name == "Surf and Turf by Soul Kitchen"),]
hotel8 <- hotels[(hotels$Hotel.Restaurant.name == "Siam Supper Club"),]
hotel9 <- hotels[(hotels$Hotel.Restaurant.name == "Sam's Steaks and Grill"),]
hotel10 <- hotels[(hotels$Hotel.Restaurant.name == "Istanbul Turkish Restaurant"),]
hotel11 <- hotels[(hotels$Hotel.Restaurant.name == "The Corner Restaurant"),]
hotel12 <- hotels[(hotels$Hotel.Restaurant.name == "Kataturk Turkish Restaurant"),]
hotel13 <- hotels[(hotels$Hotel.Restaurant.name == "Sala Sawasdee Lobby Bar"),]
hotel14 <- hotels[(hotels$Hotel.Restaurant.name == "The Palm Cuisine"),]
hotel15 <- hotels[(hotels$Hotel.Restaurant.name == "Highway Curry Indian & Thai Cuisine"),]
hotel16 <- hotels[(hotels$Hotel.Restaurant.name == "Tandoori Flames"),]
hotel17 <- hotels[(hotels$Hotel.Restaurant.name == "Pad Thai Shop"),]
hotel18 <- hotels[(hotels$Hotel.Restaurant.name == "Golden Paradise Restaurant"),]
hotel19 <- hotels[(hotels$Hotel.Restaurant.name == "Mr.Coffee"),]
hotel20 <- hotels[(hotels$Hotel.Restaurant.name == "Flavor Phuket"),]
hotel21<- hotels[(hotels$Hotel.Restaurant.name == "Baan Noy Restaurant"),]
hotel22<- hotels[(hotels$Hotel.Restaurant.name == "Ao Chalong Yacht Club Restaurant"),]
hotel23<- hotels[(hotels$Hotel.Restaurant.name == "Naughty Nuri's Phuket"),]
hotel24<- hotels[(hotels$Hotel.Restaurant.name == "Surin Chill House"),]
hotel25<- hotels[(hotels$Hotel.Restaurant.name == "Natural Efe Macrobiotic World"),]
hotel26<- hotels[(hotels$Hotel.Restaurant.name == "Honeymoon Thai Restaurant by Kenya"),]
hotel27<- hotels[(hotels$Hotel.Restaurant.name == "O-OH Farm Ta-Eiad"),]
hotel28<- hotels[(hotels$Hotel.Restaurant.name == "Da Puccio Restaurant"),]
hotel29<- hotels[(hotels$Hotel.Restaurant.name == "Sizzle Rooftop Restaurant"),]
hotel30<- hotels[(hotels$Hotel.Restaurant.name == "Benny's American Bar & Grill"),]
library(tm)
corpus <- iconv(hotels$Review)
corpus1 <- iconv(hotel1$Review )
corpus2 <- iconv(hotel2$Review)
corpus3 <- iconv(hotel3$Review)
corpus4 <- iconv(hotel4$Review)
corpus5 <- iconv(hotel5$Review)
corpus6 <- iconv(hotel6$Review)
corpus7 <- iconv(hotel7$Review)
corpus8 <- iconv(hotel8$Review)
corpus9 <- iconv(hotel9$Review)
corpus10 <- iconv(hotel10$Review)
corpus11 <- iconv(hotel11$Review)
corpus12 <- iconv(hotel12$Review)
corpus13 <- iconv(hotel13$Review)
corpus14 <- iconv(hotel14$Review)
corpus15 <- iconv(hotel15$Review)
corpus16 <- iconv(hotel16$Review)
corpus17 <- iconv(hotel17$Review)
corpus18 <- iconv(hotel18$Review)
corpus19 <- iconv(hotel19$Review)
corpus20 <- iconv(hotel20$Review)
corpus21 <- iconv(hotel21$Review)
corpus22 <- iconv(hotel22$Review)
corpus23 <- iconv(hotel23$Review)
corpus24 <- iconv(hotel24$Review)
corpus25 <- iconv(hotel25$Review)
corpus26 <- iconv(hotel26$Review)
corpus27 <- iconv(hotel27$Review)
corpus28 <- iconv(hotel28$Review)
corpus29 <- iconv(hotel29$Review)
corpus30 <- iconv(hotel30$Review)
corpus <- Corpus(VectorSource(corpus))
corpus1 <- Corpus(VectorSource(corpus1))
corpus2 <- Corpus(VectorSource(corpus2))
corpus3 <- Corpus(VectorSource(corpus3))
corpus4 <- Corpus(VectorSource(corpus4))
corpus5 <- Corpus(VectorSource(corpus5))
corpus6 <- Corpus(VectorSource(corpus6))
corpus7 <- Corpus(VectorSource(corpus7))
corpus8 <- Corpus(VectorSource(corpus8))
corpus9 <- Corpus(VectorSource(corpus9))
corpus10 <- Corpus(VectorSource(corpus10))
corpus11 <- Corpus(VectorSource(corpus11))
corpus12 <- Corpus(VectorSource(corpus12))
corpus13 <- Corpus(VectorSource(corpus13))
corpus14 <- Corpus(VectorSource(corpus14))
corpus15 <- Corpus(VectorSource(corpus15))
corpus16 <- Corpus(VectorSource(corpus16))
corpus17 <- Corpus(VectorSource(corpus17))
corpus18 <- Corpus(VectorSource(corpus18))
corpus19 <- Corpus(VectorSource(corpus19))
corpus20 <- Corpus(VectorSource(corpus20))
corpus21 <- Corpus(VectorSource(corpus21))
corpus22 <- Corpus(VectorSource(corpus22))
corpus23 <- Corpus(VectorSource(corpus23))
corpus24 <- Corpus(VectorSource(corpus24))
corpus25 <- Corpus(VectorSource(corpus25))
corpus26 <- Corpus(VectorSource(corpus26))
corpus27 <- Corpus(VectorSource(corpus27))
corpus28 <- Corpus(VectorSource(corpus28))
corpus29 <- Corpus(VectorSource(corpus29))
corpus30 <- Corpus(VectorSource(corpus30))
#data cleaning
#lowercade
corpus <-tm_map(corpus, tolower)
corpus1 <-tm_map(corpus1, tolower)
corpus2 <-tm_map(corpus2, tolower)
corpus3 <-tm_map(corpus3, tolower)
corpus4 <-tm_map(corpus4, tolower)
corpus5 <-tm_map(corpus5, tolower)
corpus6 <-tm_map(corpus6, tolower)
corpus7 <-tm_map(corpus7, tolower)
corpus8 <-tm_map(corpus8, tolower)
corpus9 <-tm_map(corpus9, tolower)
corpus10 <-tm_map(corpus10, tolower)
corpus11 <-tm_map(corpus11, tolower)
corpus12 <-tm_map(corpus12, tolower)
corpus13 <-tm_map(corpus13, tolower)
corpus14 <-tm_map(corpus14, tolower)
corpus15 <-tm_map(corpus15, tolower)
corpus16 <-tm_map(corpus16, tolower)
corpus17 <-tm_map(corpus17, tolower)
corpus18 <-tm_map(corpus18, tolower)
corpus19 <-tm_map(corpus19, tolower)
corpus20 <-tm_map(corpus20, tolower)
corpus21 <-tm_map(corpus21, tolower)
corpus22 <-tm_map(corpus22, tolower)
corpus23 <-tm_map(corpus23, tolower)
corpus24 <-tm_map(corpus24, tolower)
corpus25 <-tm_map(corpus25, tolower)
corpus26 <-tm_map(corpus26, tolower)
corpus27 <-tm_map(corpus27, tolower)
corpus28 <-tm_map(corpus28, tolower)
corpus29 <-tm_map(corpus29, tolower)
corpus30 <-tm_map(corpus30, tolower)
#removing punctuation
corpus <-tm_map(corpus, removePunctuation)
corpus1 <-tm_map(corpus1, removePunctuation)
corpus2 <-tm_map(corpus2, removePunctuation)
corpus3 <-tm_map(corpus3, removePunctuation)
corpus4 <-tm_map(corpus4, removePunctuation)
corpus5 <-tm_map(corpus5, removePunctuation)
corpus6 <-tm_map(corpus6, removePunctuation)
corpus7 <-tm_map(corpus7, removePunctuation)
corpus8 <-tm_map(corpus8, removePunctuation)
corpus9 <-tm_map(corpus9, removePunctuation)
corpus10 <-tm_map(corpus10, removePunctuation)
corpus11 <-tm_map(corpus11, removePunctuation)
corpus12 <-tm_map(corpus12, removePunctuation)
corpus13 <-tm_map(corpus13, removePunctuation)
corpus14 <-tm_map(corpus14, removePunctuation)
corpus15 <-tm_map(corpus15, removePunctuation)
corpus16 <-tm_map(corpus16, removePunctuation)
corpus17 <-tm_map(corpus17, removePunctuation)
corpus18 <-tm_map(corpus18, removePunctuation)
corpus19 <-tm_map(corpus19, removePunctuation)
corpus20 <-tm_map(corpus20, removePunctuation)
corpus21 <-tm_map(corpus21, removePunctuation)
corpus22 <-tm_map(corpus22, removePunctuation)
corpus23 <-tm_map(corpus23, removePunctuation)
corpus24 <-tm_map(corpus24, removePunctuation)
corpus25 <-tm_map(corpus25, removePunctuation)
corpus26 <-tm_map(corpus26, removePunctuation)
corpus27 <-tm_map(corpus27, removePunctuation)
corpus28 <-tm_map(corpus28, removePunctuation)
corpus29 <-tm_map(corpus29, removePunctuation)
corpus30 <-tm_map(corpus30, removePunctuation)
corpus <-tm_map(corpus, removeNumbers)
corpus1 <-tm_map(corpus1, removeNumbers)
corpus2 <-tm_map(corpus2, removeNumbers)
corpus3 <-tm_map(corpus3, removeNumbers)
corpus4 <-tm_map(corpus4, removeNumbers)
corpus5 <-tm_map(corpus5, removeNumbers)
corpus6 <-tm_map(corpus6, removeNumbers)
corpus7 <-tm_map(corpus7, removeNumbers)
corpus8 <-tm_map(corpus8, removeNumbers)
corpus9 <-tm_map(corpus9, removeNumbers)
corpus10 <-tm_map(corpus10, removeNumbers)
corpus11 <-tm_map(corpus11, removeNumbers)
corpus12 <-tm_map(corpus12, removeNumbers)
corpus13 <-tm_map(corpus13, removeNumbers)
corpus14 <-tm_map(corpus14, removeNumbers)
corpus15 <-tm_map(corpus15, removeNumbers)
corpus16 <-tm_map(corpus16, removeNumbers)
corpus17 <-tm_map(corpus17, removeNumbers)
corpus18 <-tm_map(corpus18, removeNumbers)
corpus19 <-tm_map(corpus19, removeNumbers)
corpus20 <-tm_map(corpus20, removeNumbers)
corpus21 <-tm_map(corpus21, removeNumbers)
corpus22 <-tm_map(corpus22, removeNumbers)
corpus23 <-tm_map(corpus23, removeNumbers)
corpus24 <-tm_map(corpus24, removeNumbers)
corpus25 <-tm_map(corpus25, removeNumbers)
corpus26 <-tm_map(corpus26, removeNumbers)
corpus27 <-tm_map(corpus27, removeNumbers)
corpus28 <-tm_map(corpus28, removeNumbers)
corpus29 <-tm_map(corpus29, removeNumbers)
corpus30 <-tm_map(corpus30, removeNumbers)
corpus <-tm_map(corpus, removeWords, stopwords('english'))
corpus1 <-tm_map(corpus1, removeWords, stopwords('english'))
corpus2 <-tm_map(corpus2, removeWords, stopwords('english'))
corpus3 <-tm_map(corpus3, removeWords, stopwords('english'))
corpus4 <-tm_map(corpus4, removeWords, stopwords('english'))
corpus5 <-tm_map(corpus5, removeWords, stopwords('english'))
corpus6 <-tm_map(corpus6, removeWords, stopwords('english'))
corpus7 <-tm_map(corpus7, removeWords, stopwords('english'))
corpus8 <-tm_map(corpus8, removeWords, stopwords('english'))
corpus9 <-tm_map(corpus9, removeWords, stopwords('english'))
corpus10 <-tm_map(corpus10, removeWords, stopwords('english'))
corpus11 <-tm_map(corpus11, removeWords, stopwords('english'))
corpus12 <-tm_map(corpus12, removeWords, stopwords('english'))
corpus13 <-tm_map(corpus13, removeWords, stopwords('english'))
corpus14 <-tm_map(corpus14, removeWords, stopwords('english'))
corpus15 <-tm_map(corpus15, removeWords, stopwords('english'))
corpus16 <-tm_map(corpus16, removeWords, stopwords('english'))
corpus17 <-tm_map(corpus17, removeWords, stopwords('english'))
corpus18 <-tm_map(corpus18, removeWords, stopwords('english'))
corpus19 <-tm_map(corpus19, removeWords, stopwords('english'))
corpus20 <-tm_map(corpus20, removeWords, stopwords('english'))
corpus21 <-tm_map(corpus21, removeWords, stopwords('english'))
corpus22 <-tm_map(corpus22, removeWords, stopwords('english'))
corpus23 <-tm_map(corpus23, removeWords, stopwords('english'))
corpus24 <-tm_map(corpus24, removeWords, stopwords('english'))
corpus25 <-tm_map(corpus25, removeWords, stopwords('english'))
corpus26 <-tm_map(corpus26, removeWords, stopwords('english'))
corpus27 <-tm_map(corpus27, removeWords, stopwords('english'))
corpus28 <-tm_map(corpus28, removeWords, stopwords('english'))
corpus29 <-tm_map(corpus29, removeWords, stopwords('english'))
corpus30 <-tm_map(corpus30, removeWords, stopwords('english'))
#removing url
removeURL <- function(x) gsub('http[[:alnum:]]*','',x)
corpus <-tm_map(corpus, content_transformer(removeURL))
corpus1 <-tm_map(corpus1, content_transformer(removeURL))
corpus2 <-tm_map(corpus2, content_transformer(removeURL))
corpus3 <-tm_map(corpus3, content_transformer(removeURL))
corpus4 <-tm_map(corpus4, content_transformer(removeURL))
corpus5 <-tm_map(corpus5, content_transformer(removeURL))
corpus6 <-tm_map(corpus6, content_transformer(removeURL))
corpus7 <-tm_map(corpus7, content_transformer(removeURL))
corpus8 <-tm_map(corpus8, content_transformer(removeURL))
corpus9 <-tm_map(corpus9, content_transformer(removeURL))
corpus10 <-tm_map(corpus10, content_transformer(removeURL))
corpus11 <-tm_map(corpus11, content_transformer(removeURL))
corpus12 <-tm_map(corpus12, content_transformer(removeURL))
corpus13 <-tm_map(corpus13, content_transformer(removeURL))
corpus14 <-tm_map(corpus14, content_transformer(removeURL))
corpus15 <-tm_map(corpus15, content_transformer(removeURL))
corpus16 <-tm_map(corpus16, content_transformer(removeURL))
corpus17 <-tm_map(corpus17, content_transformer(removeURL))
corpus18 <-tm_map(corpus18, content_transformer(removeURL))
corpus19 <-tm_map(corpus19, content_transformer(removeURL))
corpus20 <-tm_map(corpus20, content_transformer(removeURL))
corpus21 <-tm_map(corpus21, content_transformer(removeURL))
corpus22 <-tm_map(corpus22, content_transformer(removeURL))
corpus23 <-tm_map(corpus23, content_transformer(removeURL))
corpus24 <-tm_map(corpus24, content_transformer(removeURL))
corpus25 <-tm_map(corpus25, content_transformer(removeURL))
corpus26 <-tm_map(corpus26, content_transformer(removeURL))
corpus27 <-tm_map(corpus27, content_transformer(removeURL))
corpus28 <-tm_map(corpus28, content_transformer(removeURL))
corpus29 <-tm_map(corpus29, content_transformer(removeURL))
corpus30 <-tm_map(corpus30, content_transformer(removeURL))
#whitespaces
corpus <-tm_map(corpus, stripWhitespace)
corpus1 <-tm_map(corpus1, stripWhitespace)
corpus2 <-tm_map(corpus2, stripWhitespace)
corpus3 <-tm_map(corpus3, stripWhitespace)
corpus4 <-tm_map(corpus4, stripWhitespace)
corpus5 <-tm_map(corpus5, stripWhitespace)
corpus6 <-tm_map(corpus6, stripWhitespace)
corpus7 <-tm_map(corpus7, stripWhitespace)
corpus8 <-tm_map(corpus8, stripWhitespace)
corpus9 <-tm_map(corpus9, stripWhitespace)
corpus10 <-tm_map(corpus10, stripWhitespace)
corpus11 <-tm_map(corpus11, stripWhitespace)
corpus12 <-tm_map(corpus12, stripWhitespace)
corpus13 <-tm_map(corpus13, stripWhitespace)
corpus14 <-tm_map(corpus14, stripWhitespace)
corpus15 <-tm_map(corpus15, stripWhitespace)
corpus16 <-tm_map(corpus16, stripWhitespace)
corpus17 <-tm_map(corpus17, stripWhitespace)
corpus18 <-tm_map(corpus18, stripWhitespace)
corpus19 <-tm_map(corpus19, stripWhitespace)
corpus20 <-tm_map(corpus20, stripWhitespace)
corpus21 <-tm_map(corpus21, stripWhitespace)
corpus22 <-tm_map(corpus22, stripWhitespace)
corpus23 <-tm_map(corpus23, stripWhitespace)
corpus24 <-tm_map(corpus24, stripWhitespace)
corpus25 <-tm_map(corpus25, stripWhitespace)
corpus26 <-tm_map(corpus26, stripWhitespace)
corpus27 <-tm_map(corpus27, stripWhitespace)
corpus28 <-tm_map(corpus28, stripWhitespace)
corpus29 <-tm_map(corpus29, stripWhitespace)
corpus30 <-tm_map(corpus30, stripWhitespace)
inspect(corpus20)
#term Document matrix
tdm <- TermDocumentMatrix(corpus)
tdm <- as.matrix(tdm)
tdm[1:10, 1:20]
positive_lexicon <- read.csv("Positive words.txt")
negative_lexicon <- read.csv("Negative words.txt")
head(positive_words)
head(positive_lexicon)
install.packages("Snowballic")
stem_corpus <- tm_map(corpus, stemDocument)
stem_corpus <- tm_map(corpus, stemDocument)
install.packages("Snowballic")
stem_corpus <- tm_map(corpus, stemDocument)
library("wordcloud")
sentiment <- function(corpus)
{
#generate wordclouds
wordcloud(corpus,
min.freq = 3,
colors=brewer.pal(8, "Dark2"),
random.color = TRUE,
max.words = 100)
#Calculating the count of total positive and negative words in each review
#Create variables and vectors
total_pos_count <- 0
total_neg_count <- 0
pos_count_vector <- c()
neg_count_vector <- c()
#Calculate the size of the corpus
size <- length(corpus)
for(i in 1:size)
{
#All the words in current review
corpus_words<- list(strsplit(corpus[[i]]$content, split = " "))
#positive words in current review
pos_count <-length(intersect(unlist(corpus_words), unlist(positive_lexicon)))
#negative words in current review
neg_count <- length(intersect(unlist(corpus_words), unlist(negative_lexicon)))
total_pos_count <- total_pos_count + pos_count ## overall positive count
total_neg_count <- total_neg_count + neg_count ## overall negative count
}
#Calculating overall percentage of positive and negative words of all the reviews
total_pos_count ## overall positive count
total_neg_count ## overall negative count
total_count <- total_pos_count + total_neg_count
overall_positive_percentage <- (total_pos_count*100)/total_count
overall_negative_percentage <- (total_neg_count*100)/total_count
overall_positive_percentage ## overall positive percentage
#Create a dataframe with all the positive and negative reviews
df<-data.frame(Review_Type=c("Postive","Negitive"),
Count=c(total_pos_count ,total_neg_count ))
print(df) #Print
overall_positive_percentage<-paste("Percentage of Positive Reviews:",
round(overall_positive_percentage,2),"%")
return(overall_positive_percentage)
}
sentiment(corpus1)
sentiment(corpus1)
sentiment(corpus2)
sentiment(corpus3)
sentiment(corpus)
sentiment(corpus)
sampleData <- read.csv("Amazon.csv")
